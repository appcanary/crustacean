(ns crustacean.migrations-test
  (:require [crustacean.migrations :refer :all]
            [datomic.api :as d]
            [crustacean.core :refer [defentity*]]
            [clojure.test :refer :all]))

(defn last-migration
  "Given a model spit out a plausible last migration for it"
  [model]
  {:model (model->edn model)
   :txes  [(initial-txes model)]})

(deftest test-migration-txes
  (let [model (defentity* 'model
                '((:fields [field1 :keyword :unique-value :assignment-required])))
        model2 (defentity* 'model
                 '((:fields [field1 :keyword :unique-value :assignment-required]
                            [field2 :keyword :unique-value :assignment-required])))]
    ;; If we migrate a model with no changes, return an emtpy vector
    (is (= [] (migration-txes (last-migration model) model)))

    ;; If we add a field, create a transaction adding it, and regenerate all the autogenerated db functions
    (let [txes (migration-txes (last-migration model) model2)
          tx-idents (set (map :db/ident txes))]
      (is (= 4 (count txes)))
      ;; Make sure we create entities with the right names
      (is (contains? tx-idents :model/field2))
      (is (contains? tx-idents :model/create))
      (is (contains? tx-idents :model/malformed?))
      (is (contains? tx-idents :model/exists?)))

    ;; If we delete a field, create a transaction deleting it and regenerate all the autogenerated db functions
    (let [txes (migration-txes (last-migration model2) model)
          tx-idents (set (map :db/ident txes))]
      (is (= 4 (count txes)))
      ;; Make sure we create entities with the right names. When deleting an entity, we change it's name to :unused/foo/bar
      (is (contains? tx-idents :unused/model/field2))
      (is (contains? tx-idents :model/create))
      (is (contains? tx-idents :model/malformed?))
      (is (contains? tx-idents :model/exists?)))

    ;; If we modify defaults or validators, regenrate all the autogenerated db functions
    (let [model (defentity* 'model
                  '((:fields [field1 :keyword :unique-value :assignment-required])))
          model-with-defaults (defentity* 'model
                                '((:fields [field1 :keyword :unique-value :assignment-required])
                                  (:defaults [field1 (fn [] :hi)])))
          txes (migration-txes (last-migration model) model-with-defaults)
          tx-idents (set (map :db/ident txes))]
      (is (= 3 (count txes)))
      ;; Make sure we create entities with the right names. When deleting an entity, we change it's name to :unused/foo/bar
      (is (contains? tx-idents :model/create))
      (is (contains? tx-idents :model/malformed?))
      (is (contains? tx-idents :model/exists?)))

    (let [model (defentity* 'model
                  '((:fields [field1 :keyword :unique-value :assignment-required])))
          model-with-validators (defentity* 'model
                                '((:fields [field1 :keyword :unique-value :assignment-required])
                                  (:validators [field1 (fn [x] (= x :a))])))
          txes (migration-txes (last-migration model) model-with-validators)
          tx-idents (set (map :db/ident txes))]
      (is (= 3 (count txes)))
      ;; Make sure we create entities with the right names. When deleting an entity, we change it's name to :unused/foo/bar
      (is (contains? tx-idents :model/create))
      (is (contains? tx-idents :model/malformed?))
      (is (contains? tx-idents :model/exists?)))


    ;; When creating a new db-func transact it
    (let [model (defentity* 'model
                  '((:fields [field1 :keyword :unique-value :assignment-required])))
          model-with-db-func (defentity* 'model
                                  '((:fields [field1 :keyword :unique-value :assignment-required])
                                    (:db-functions [somefunc (d/function {:lang "clojure" :params '[] :code '(+ 1 2 3)})])))
          txes (migration-txes (last-migration model) model-with-db-func)
          tx-idents (set (map :db/ident txes))]
      (is (= 1 (count txes)))
      ;; Make sure we create entities with the right names. When deleting an entity, we change it's name to :unused/foo/bar
      (is (= #{:model/somefunc} tx-idents)))))
